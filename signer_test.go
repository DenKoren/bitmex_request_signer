package bitmex_request_signer

import (
	"testing"

	"github.com/stretchr/testify/suite"
)

type SignerTestSuite struct {
	suite.Suite
	apiSecret string
}

func TestSigner(t *testing.T) {
	suite.Run(t, new(SignerTestSuite))
}

func (s *SignerTestSuite) SetupTest() {
	s.apiSecret = "chNOOS4KvNXR_Xq4k4c9qsfoKWvnDecLATCRlcBwyKDYnWgO"
}

func (s *SignerTestSuite) TestSign() {
	// This are examples from official BitMex REST API documentation
	testCases := map[string]struct{
		toSign            string
		expectedSignature string
	}{
		"simple": {
			"GET/api/v1/instrument1518064236",
			"c7682d435d0cfe87c16098df34ef2eb5a549d4c5a3c2b1f0f77b8af73423bf00",
		},
		"with_query": {
			"GET/api/v1/instrument?filter=%7B%22symbol%22%3A+%22XBTM15%22%7D1518064237",
			"e2f422547eecb5b3cb29ade2127e21b858b235b386bfa45e1c1756eb3383919f",
		},
		"with_body": {
			"POST/api/v1/order1518064238{\"symbol\":\"XBTM15\",\"price\":219.0,\"clOrdID\":\"mm_bitmex_1a/oemUeQ4CAJZgP3fjHsA\",\"orderQty\":98}",
			"1749cd2ccae4aa49048ae09f0b95110cee706e0944e6a14ad0b3a8cb45bd336b",
		},
	}

	runTest := func(toSign, expectedSignature string) {
		signer := NewSigner(s.apiSecret)
		signed := signer.SignString(toSign)

		s.Assert().Equal(
			expectedSignature,
			signed,
			"Signature generated by Signer does not match expected for provided string",
		)
	}

	for caseName, caseParams := range testCases {
		s.Run(
			caseName,
			func() {
				runTest(caseParams.toSign, caseParams.expectedSignature)
			},
		)
	}
}
